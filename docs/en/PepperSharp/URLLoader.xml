<Type Name="URLLoader" FullName="PepperSharp.URLLoader">
  <TypeSignature Language="C#" Value="public class URLLoader : PepperSharp.Resource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit URLLoader extends PepperSharp.Resource" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.PepperSharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>PepperSharp.Resource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public URLLoader (PepperSharp.Instance instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class PepperSharp.Instance instance) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instance" Type="PepperSharp.Instance" />
      </Parameters>
      <Docs>
        <param name="instance">The instance with which this resource will be
             associated.</param>
        <summary>
             Constructs a URLLoader object.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             This function is used to cancel any pending IO and close the URLLoader
             object. Any pending callbacks will still run, reporting
             <code>Aborted</code> if pending IO was interrupted.  It is NOT
             valid to call Open() again after a call to this function.
            
             <strong>Note:</strong> If the <code>URLLoader</code> object is destroyed
             while it is still open, then it will be implicitly closed so you are not
             required to call Close().
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;PepperSharp.PPError&gt; CloseAsync (PepperSharp.MessageLoop messageLoop = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;valuetype PepperSharp.PPError&gt; CloseAsync(class PepperSharp.MessageLoop messageLoop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;PepperSharp.PPError&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageLoop" Type="PepperSharp.MessageLoop" />
      </Parameters>
      <Docs>
        <param name="messageLoop">Optional MessageLoop instance used to run the command on.</param>
        <summary>
             This async function is used to cancel any pending IO and close the URLLoader
             object. Any pending callbacks will still run, reporting
             <code>Aborted</code> if pending IO was interrupted.  It is NOT
             valid to call Open() again after a call to this function.
            
             <strong>Note:</strong> If the <code>URLLoader</code> object is destroyed
             while it is still open, then it will be implicitly closed so you are not
             required to call Close().
             </summary>
        <returns>Error code</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishStreamingToFile">
      <MemberSignature Language="C#" Value="public PepperSharp.PPError FinishStreamingToFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype PepperSharp.PPError FinishStreamingToFile() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PepperSharp.PPError</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             This function is used to wait for the response body to be completely
             downloaded to the file provided by the GetBodyAsFileRef() in the current
             <code>URLResponseInfo</code>. This function is only used if
             <code>StreamToFile</code> was set on the <code>URLRequestInfo</code> passed to Open().
             </summary>
        <returns>Number of bytes read or an error code</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishStreamingToFileAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;PepperSharp.PPError&gt; FinishStreamingToFileAsync (PepperSharp.MessageLoop messageLoop = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;valuetype PepperSharp.PPError&gt; FinishStreamingToFileAsync(class PepperSharp.MessageLoop messageLoop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;PepperSharp.PPError&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageLoop" Type="PepperSharp.MessageLoop" />
      </Parameters>
      <Docs>
        <param name="messageLoop">Optional MessageLoop instance used to run the command on.</param>
        <summary>
             This async function is used to wait for the response body to be completely
             downloaded to the file provided by the GetBodyAsFileRef() in the current
             <code>URLResponseInfo</code>. This function is only used if
             <code>StreamToFile</code> was set on the <code>URLRequestInfo</code> passed to Open().
             </summary>
        <returns>Error code</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FollowRedirect">
      <MemberSignature Language="C#" Value="public PepperSharp.PPError FollowRedirect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype PepperSharp.PPError FollowRedirect() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PepperSharp.PPError</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             This function can be invoked to follow a redirect after Open() completed on receiving redirect headers. 
             </summary>
        <returns>Error code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FollowRedirectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;PepperSharp.PPError&gt; FollowRedirectAsync (PepperSharp.MessageLoop messageLoop = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;valuetype PepperSharp.PPError&gt; FollowRedirectAsync(class PepperSharp.MessageLoop messageLoop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;PepperSharp.PPError&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageLoop" Type="PepperSharp.MessageLoop" />
      </Parameters>
      <Docs>
        <param name="messageLoop">Optional MessageLoop instance used to run the command on.</param>
        <summary>
             This async function can be invoked to follow a redirect after Open() completed on receiving redirect headers.
             </summary>
        <returns>Error code</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDownloadProgress">
      <MemberSignature Language="C#" Value="public bool GetDownloadProgress (out long bytesReceived, out long totalBytesToBeReceived);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetDownloadProgress(int64 bytesReceived, int64 totalBytesToBeReceived) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesReceived" Type="System.Int64&amp;" RefType="out" />
        <Parameter Name="totalBytesToBeReceived" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="bytesReceived">The number of bytes received thus far.</param>
        <param name="totalBytesToBeReceived">The total number of bytes to be
             received. The total bytes to be received may be unknown, in which case
             <code>totalBytesToBeReceived</code> will be set to -1.</param>
        <summary>
             This function returns the current download progress, which is meaningful
             after Open() has been called. Progress only refers to the response body
             and does not include the headers.
            
             This data is only available if the <code>URLRequestInfo</code> passed to Open() had the
             <code>ReportDownloadProgress</code> property set to true.
             </summary>
        <returns>true if the download progress is available, false if it is
             not available.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUploadProgress">
      <MemberSignature Language="C#" Value="public bool GetUploadProgress (out long bytesSent, out long totalBytesToBeSent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetUploadProgress(int64 bytesSent, int64 totalBytesToBeSent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesSent" Type="System.Int64&amp;" RefType="out" />
        <Parameter Name="totalBytesToBeSent" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="bytesSent">The number of bytes sent thus far.</param>
        <param name="totalBytesToBeSent">The total number of bytes to be sent.</param>
        <summary>
             This function returns the current upload progress (which is only
             meaningful after Open() has been called). Progress only refers to the
             request body and does not include the headers.
            
             This data is only available if the <code>URLRequestInfo</code> passed to
             Open() had the <code>ReportUploadProgress</code> property set to <code>true</code>. 
             </summary>
        <returns>true if the upload progress is available, false if it is not
             available.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleClose">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;PepperSharp.PPError&gt; HandleClose;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;valuetype PepperSharp.PPError&gt; HandleClose" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;PepperSharp.PPError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Event raised when the FileIO issues Close on the FileRef.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleFinishStreamingToFile">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;PepperSharp.PPError&gt; HandleFinishStreamingToFile;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;valuetype PepperSharp.PPError&gt; HandleFinishStreamingToFile" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;PepperSharp.PPError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Event raised when the URLLoader issues a FishishStreamingToFile.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleOpen">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;PepperSharp.PPError&gt; HandleOpen;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;valuetype PepperSharp.PPError&gt; HandleOpen" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;PepperSharp.PPError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Event raised when the URLLoader issues Open request.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleReadResponseBody">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;PepperSharp.PPError&gt; HandleReadResponseBody;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;valuetype PepperSharp.PPError&gt; HandleReadResponseBody" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;PepperSharp.PPError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Event raised when the URLLoader issues a ReadResponseBody.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleRedirect">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;PepperSharp.PPError&gt; HandleRedirect;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;valuetype PepperSharp.PPError&gt; HandleRedirect" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;PepperSharp.PPError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Event raised when the URLLoader issues a FollowRedirect.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClose">
      <MemberSignature Language="C#" Value="protected virtual void OnClose (PepperSharp.PPError result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClose(valuetype PepperSharp.PPError result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="PepperSharp.PPError" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFinishStreamingToFile">
      <MemberSignature Language="C#" Value="protected virtual void OnFinishStreamingToFile (PepperSharp.PPError result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFinishStreamingToFile(valuetype PepperSharp.PPError result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="PepperSharp.PPError" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnOpen">
      <MemberSignature Language="C#" Value="protected virtual void OnOpen (PepperSharp.PPError result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpen(valuetype PepperSharp.PPError result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="PepperSharp.PPError" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnReadResponseBody">
      <MemberSignature Language="C#" Value="protected void OnReadResponseBody (PepperSharp.PPError result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnReadResponseBody(valuetype PepperSharp.PPError result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="PepperSharp.PPError" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRedirect">
      <MemberSignature Language="C#" Value="protected virtual void OnRedirect (PepperSharp.PPError result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRedirect(valuetype PepperSharp.PPError result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="PepperSharp.PPError" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public PepperSharp.PPError Open (PepperSharp.URLRequestInfo requestInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype PepperSharp.PPError Open(class PepperSharp.URLRequestInfo requestInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PepperSharp.PPError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestInfo" Type="PepperSharp.URLRequestInfo" />
      </Parameters>
      <Docs>
        <param name="requestInfo">A <code>URLRequestInfo</code> corresponding to a
             URLRequestInfo.</param>
        <summary>
             This function begins loading the <code>URLRequestInfo</code>.
             The operation completes when response headers are received or when an
             error occurs.  Use ResponseInfo to access the response
             headers.
             </summary>
        <returns>Error code</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;PepperSharp.PPError&gt; OpenAsync (PepperSharp.URLRequestInfo requestInfo, PepperSharp.MessageLoop openLoop = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;valuetype PepperSharp.PPError&gt; OpenAsync(class PepperSharp.URLRequestInfo requestInfo, class PepperSharp.MessageLoop openLoop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;PepperSharp.PPError&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestInfo" Type="PepperSharp.URLRequestInfo" />
        <Parameter Name="openLoop" Type="PepperSharp.MessageLoop" />
      </Parameters>
      <Docs>
        <param name="requestInfo">A <code>URLRequestInfo</code> corresponding to a
             URLRequestInfo.</param>
        <param name="openLoop">Optional MessageLoop instance that can be used to post the command to</param>
        <summary>
             This function begins loading the <code>URLRequestInfo</code> asynchronously.
             The operation completes when response headers are received or when an
             error occurs.  Use ResponseInfo to access the response
             headers.
             </summary>
        <returns>Error code</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadResponseBody">
      <MemberSignature Language="C#" Value="public PepperSharp.PPError ReadResponseBody (byte[] buffer, int bytesToRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype PepperSharp.PPError ReadResponseBody(unsigned int8[] buffer, int32 bytesToRead) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PepperSharp.PPError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="bytesToRead" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">A byte array for the response body.</param>
        <param name="bytesToRead">The number of bytes to read.</param>
        <summary>
             This function is used to read the response body. The size of the buffer
             must be large enough to hold the specified number of bytes to read.
             This function might perform a partial read.
             </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadResponseBodyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;PepperSharp.PPError&gt; ReadResponseBodyAsync (byte[] buffer, int bytes_to_read, PepperSharp.MessageLoop messageLoop = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;valuetype PepperSharp.PPError&gt; ReadResponseBodyAsync(unsigned int8[] buffer, int32 bytes_to_read, class PepperSharp.MessageLoop messageLoop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;PepperSharp.PPError&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="bytes_to_read" Type="System.Int32" />
        <Parameter Name="messageLoop" Type="PepperSharp.MessageLoop" />
      </Parameters>
      <Docs>
        <param name="buffer">A byte array for the response body.</param>
        <param name="bytes_to_read">To be added.</param>
        <param name="messageLoop">Optional MessageLoop instance used to run the command on.</param>
        <summary>
             This function is used to read the response body asynchronously. The size of the buffer
             must be large enough to hold the specified number of bytes to read.
             This function might perform a partial read.
             </summary>
        <returns>Error code</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseInfo">
      <MemberSignature Language="C#" Value="public PepperSharp.URLResponseInfo ResponseInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class PepperSharp.URLResponseInfo ResponseInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PepperSharp.URLResponseInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets the current <code>URLResponseInfo</code> object.
             
             Will be an <code>IsEmpty</code> object if the loader is not a valid resource or if Open() has not been
             called.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
